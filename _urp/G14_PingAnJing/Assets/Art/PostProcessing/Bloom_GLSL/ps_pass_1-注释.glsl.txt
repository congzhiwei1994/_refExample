#version 330
out vec4 webgl_FragColor;
uniform float bloom_intensity;
uniform sampler2D sam_diffuse_0;
in vec4 v_texture0;
in vec4 v_texture1;
in vec4 v_texture2;
void main(){
float sam_diffuse_0_bias = 0.0;
vec2 local_0 = v_texture2.xy;
// 原位置
vec4 local_2 = texture(sam_diffuse_0, local_0, sam_diffuse_0_bias);
vec2 local_3 = v_texture0.xy;
vec2 local_4 = v_texture0.zw;
// (1) x原 y+半像素 
vec4 local_5 = texture(sam_diffuse_0, local_3, sam_diffuse_0_bias);
// (2) x+半像素 y原
vec4 local_6 = texture(sam_diffuse_0, local_4, sam_diffuse_0_bias);
vec2 local_7 = v_texture1.xy;
vec2 local_8 = v_texture1.zw;
// (3) x原 y-半像素
vec4 local_9 = texture(sam_diffuse_0, local_7, sam_diffuse_0_bias);
// (4) x-半像素 y原
vec4 local_10 = texture(sam_diffuse_0, local_8, sam_diffuse_0_bias);
vec3 local_11 = local_2.xyz;
float local_12 = local_2.w;
float local_14 = local_5.w;
// Alpha = 原 + (1)
float local_15 = (local_12 + local_14);
float local_17 = local_6.w;
// Alpha = 原 + (1) + (2)
float local_18 = (local_15 + local_17);
float local_20 = local_9.w;
// Alpha = 原 + (1) + (2) + (3)
float local_21 = (local_18 + local_20);
float local_23 = local_10.w;
// Alpha = 原 + (1) + (2) + (3) + (4)
float local_24 = (local_21 + local_23);
// 平均Alpha = Alpha / 5
float local_26 = (local_24 / 5.0);
// 颜色平方 
vec3 local_27 = (local_11 * local_11);
// 1 + 平均Alpha
float local_29 = (1.0 + local_26);
// 平均Alpha / ( 1 + 平均Alpha)
float local_30 = (local_26 / local_29);
vec3 local_31 = (local_27 * local_30);
vec3 local_33 = (local_31 * 1.5);
vec3 local_34 = (local_33 * 1.5);
vec3 local_35 = (bloom_intensity * local_34);
vec4 local_36 = vec4(local_35.x, local_35.y, local_35.z, 1.0);
(webgl_FragColor = local_36);
}
