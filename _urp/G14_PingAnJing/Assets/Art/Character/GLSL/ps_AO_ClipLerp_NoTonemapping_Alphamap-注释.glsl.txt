#version 330
uniform float metal_multi;
uniform float rough_multi;
uniform float envir_brightness;
uniform float envir_fresnel_brightness;
uniform float max_brightness;
uniform float min_ggx_roughness;
uniform float max_ggx_roughness;
uniform float diffuse_intensity;
uniform float u_light_scale;
uniform vec4 env_shadow_factor;
uniform float AO_slider;
uniform vec3 force_pixel_color;
uniform float rim_power;
uniform float rim_multi;
uniform vec4 rim_color;
uniform vec4 adjust_inner;
uniform float inner_alpha;
uniform float u_rim_start;
uniform float u_rim_end;
uniform float illum_multi;
uniform float bloom_range;
uniform float cull_lerp;
uniform vec4 u_shadowmap_info;
uniform vec2 shadow_bias_factor;
uniform vec4 ShadowLightAttr[5];
uniform vec4 camera_pos;
uniform mat4 view_mat;
uniform float AlphaMtl;
uniform mat4 envSHR;
uniform mat4 envSHG;
uniform mat4 envSHB;
uniform sampler2D sam_diffuse_0;
uniform sampler2D sam_other1_2;
uniform sampler2D sam_other2_3;
uniform sampler2D sam_other3_5;
uniform sampler2DShadow sam_shadow_4;
uniform sampler2D sam_diffuse_alpha_7;
in vec4 v_texture0;
in vec4 v_texture3;
in vec3 tangentWorld0;
in vec3 binormalWorld0;
in vec3 vertex_normal_world;
in vec4 v_texture10;
out vec4 gFragColor;
void main(){
float sam_other1_2_bias = -1.0;
float sam_other3_5_bias = -1.0;
float sam_diffuse_0_bias = -1.0;
float sam_diffuse_alpha_7_bias = 0.0;
vec2 local_0 = v_texture0.xy;
vec4 local_2 = texture(sam_other1_2, local_0, sam_other1_2_bias);
float local_3;
float local_4;
float local_5;
float local_11;
(local_11 = 1.0);
float local_16;
(local_16 = 1.0);
float local_21;
(local_21 = 1.0);
(local_3 = local_11);
(local_4 = local_16);
(local_5 = local_21);
float local_26;
(local_26 = 1.0);
vec3 local_29;
vec3 local_30;
float local_31;
vec3 local_32;
vec3 local_33;
vec2 local_34;
float local_35;
vec4 local_36 = texture(sam_other3_5, local_0, sam_other3_5_bias);
vec2 local_37 = local_36.xy;
vec2 local_40 = (local_37 * 2.0);
vec2 local_42 = vec2(1.0, 1.0);
vec2 local_43 = (local_40 - local_42);
vec3 local_44;
vec3 local_45;
vec2 local_46;
float local_80 = local_43.x;
float local_81 = local_43.y;
vec3 local_82 = (tangentWorld0 * local_80);
vec3 local_83 = (local_82 * local_26);
vec3 local_84 = (binormalWorld0 * local_81);
vec3 local_85 = (local_84 * local_26);
vec3 local_86 = (local_83 + local_85);
vec3 local_87 = (local_86 + vertex_normal_world);
// normalWS
vec3 local_88 = normalize(local_87);
(local_44 = local_88);
(local_45 = local_88);
(local_46 = local_43);
float local_90 = local_36.z;
(local_29 = local_45);
(local_30 = local_44);
(local_31 = local_90);
(local_32 = binormalWorld0);
(local_33 = tangentWorld0);
(local_34 = local_46);
(local_35 = local_90);
vec3 local_97;
(local_97 = local_29);
vec4 local_106 = texture(sam_diffuse_0, local_0, sam_diffuse_0_bias);
vec4 local_107;
vec4 local_108 = texture(sam_diffuse_alpha_7, local_0, sam_diffuse_alpha_7_bias);
vec3 local_109 = local_106.xyz;
float local_112 = local_108.w;
vec4 local_113 = vec4(local_109.x, local_109.y, local_109.z, local_112);
(local_107 = local_113);
vec4 local_122;
vec4 local_125 = vec4(0.0, 0.0, 0.0, 0.0);
(local_122 = local_125);
vec4 local_126;
vec4 local_127;
(local_126 = local_107);
(local_127 = local_2);
float local_224;
float local_225;
float local_226;
float local_230 = local_127.x;
float local_231 = local_127.y;
float local_232 = local_127.z;
float local_234 = (local_230 + metal_multi);
float local_235 = clamp(local_234, 0.0, 1.0);
float local_236 = (local_232 + rough_multi);
float local_237 = clamp(local_236, 0.0, 1.0);
float local_239 = (2.0 * local_231);
float local_241 = (local_239 - 1.0);
float local_243 = clamp(local_241, 0.0, 1.0);
(local_224 = local_235);
(local_225 = local_237);
(local_226 = local_243);
float local_244;
float local_245;
{
float local_247 = shadow_bias_factor.x;
float local_248 = shadow_bias_factor.y;
float local_251 = v_texture10.w;
float local_252 = (1.0 - local_251);
float local_253 = (local_247 * local_252);
float local_254 = (local_253 + local_248);
float local_256 = clamp(local_254, 0.0, 1.0);
vec2 local_257 = v_texture10.xy;
float local_260 = v_texture10.z;
float local_262 = (local_260 - local_256);
float local_263;
float local_265 = (local_262 * 0.5);
float local_266 = (local_265 + 0.5);
(local_263 = local_266);
float local_267;
vec4 local_275 = vec4(local_257.x, local_257.y, local_263, 1.0);
float local_276 = textureProj(sam_shadow_4, local_275);
(local_267 = local_276);
float local_277 = local_257.x;
float local_278 = local_257.y;
float local_279 = (1.0 - local_277);
float local_280 = (1.0 - local_278);
vec4 local_281 = vec4(local_277, local_279, local_278, local_280);
vec4 local_282 = sign(local_281);
vec4 local_284 = vec4(1.0, 1.0, 1.0, 1.0);
float local_285 = dot(local_282, local_284);
float local_286 = step(3.5, local_285);
float local_287 = (1.0 - local_286);
float local_288 = (local_267 + local_287);
float local_289 = clamp(local_288, 0.0, 1.0);
(local_245 = local_289);
}
float local_291;
float local_314;
(local_314 = local_245);
(local_291 = local_314);
(local_244 = local_291);
vec4 local_332 = ShadowLightAttr[1];
vec3 local_333 = local_332.xyz;
vec3 local_335 = (1.0 * local_333);
vec4 local_337 = ShadowLightAttr[3];
vec3 local_338 = local_337.xyz;
vec3 local_340 = normalize(local_338);
float local_341 = local_340.x;
float local_342 = local_340.y;
float local_343 = local_340.z;
vec3 local_344 = vec3(local_341, local_342, local_343);
vec3 local_345 = normalize(local_344);
vec3 local_346 = camera_pos.xyz;
vec3 local_348 = v_texture3.xyz;
vec3 local_350 = (local_346 - local_348);
// viewDirectionWS
vec3 local_351 = normalize(local_350);
vec3 local_352 = (local_345 * u_light_scale);
vec3 local_353 = (local_351 - local_345);
vec3 local_354 = normalize(local_353);
float local_355 = dot(local_351, local_354);
float local_357 = clamp(local_355, 0.0, 1.0);
float local_358 = dot(local_29, local_354);
float local_359 = max(0.0, local_358);
float local_360 = dot(local_351, local_29);
// NoV 01
float local_361 = clamp(local_360, 0.0, 1.0);
vec3 local_362 = (-local_352);
float local_363 = dot(local_29, local_362);
float local_364;
float local_365;
float local_396 = clamp(local_363, 0.0, 1.0);
float local_397 = min(local_396, local_244);
float local_398;
(local_398 = 0.0);
(local_364 = local_397);
(local_365 = local_398);
float local_405 = -1.0;
float local_406 = clamp(local_364, local_405, 0.0);
float local_407;
(local_407 = local_364);
float local_415;
float local_416;
float local_476;
(local_476 = 0.0);
(local_415 = local_359);
(local_416 = local_476);
vec3 local_482;
float local_483;
vec3 local_620 = vec3(0.0, 0.0, 0.0);
(local_482 = local_620);
(local_483 = 0.0);
float local_621;
float local_622;
(local_621 = local_224);
(local_622 = local_225);
vec3 local_635 = local_126.xyz;
// ÑÕÉ«ÌùÍ¼Alpha
float local_636 = local_126.w;
vec3 local_637 = (local_635 * local_635);
vec3 local_638 = (local_637 * diffuse_intensity);
vec3 local_639 = vec3(local_483, local_483, local_483);
vec3 local_640 = mix(local_638, local_482, local_639);
float local_641 = (1.0 - local_621);
vec3 local_642 = (local_641 * local_640);
vec3 local_643;
vec3 local_663 = vec3(0.0, 0.0, 0.0);
(local_643 = local_663);
vec3 local_664;
float local_666 = mix(1.0, local_31, local_361);
float local_669 = (0.5 - local_31);
float local_670 = clamp(local_669, 0.0, 1.0);
float local_671 = (2.0 * local_670);
float local_672 = (local_671 * AO_slider);
float local_673 = mix(local_666, local_31, local_672);
vec3 local_674 = vec3(local_673, local_673, local_673);
(local_664 = local_674);
float local_677 = local_126.x;
float local_678 = local_126.y;
float local_679 = local_126.z;
float local_681 = max(local_677, local_678);
float local_682 = max(local_681, local_679);
float local_684 = (local_682 - 0.38999999);
vec3 local_685 = vec3(local_684, local_684, local_684);
vec3 local_687 = vec3(0.1, 0.1, 0.1);
vec3 local_688 = max(local_685, local_687);
vec3 local_689 = (local_635 - local_688);
vec3 local_690 = clamp(local_689, 0.0, 1.0);
vec3 local_691;
(local_691 = local_664);
vec3 local_694;
vec3 local_695;
vec3 local_729 = vec3(0.0, 0.0, 0.0);
vec3 local_730 = vec3(0.0, 0.0, 0.0);
(local_694 = local_729);
(local_695 = local_730);
vec3 local_731;
vec3 local_732 = (-local_351);
vec3 local_733 = reflect(local_732, local_29);
(local_731 = local_733);
mat3 local_736 = mat3(view_mat);
vec3 local_737 = (local_736 * local_29);
float local_738 = local_737.x;
float local_739 = local_737.y;
float local_740 = local_737.z;
float local_741 = (-local_740);
vec3 local_742 = vec3(local_738, local_739, local_741);
vec3 local_743;
{
vec4 local_746 = vec4(local_742.x, local_742.y, local_742.z, 1.0);
vec4 local_747 = (envSHR * local_746);
float local_748 = dot(local_746, local_747);
vec4 local_749 = (envSHG * local_746);
float local_750 = dot(local_746, local_749);
vec4 local_751 = (envSHB * local_746);
float local_752 = dot(local_746, local_751);
vec3 local_753 = vec3(local_748, local_750, local_752);
(local_743 = local_753);
}
vec3 local_755 = env_shadow_factor.xyz;
vec3 local_757 = vec3(1.0, 1.0, 1.0);
vec3 local_758 = vec3(local_407, local_407, local_407);
vec3 local_759 = mix(local_755, local_757, local_758);
vec3 local_760 = vec3(local_407, local_407, local_407);
vec3 local_761 = (local_760 + local_694);
vec3 local_762 = (local_761 * local_335);
vec3 local_763 = (local_759 * local_743);
vec3 local_764 = (local_743 * local_695);
vec3 local_765 = (local_763 + local_764);
vec3 local_766 = (local_765 * envir_brightness);
vec3 local_767 = (local_762 + local_766);
vec3 local_768 = (local_642 * local_767);
vec3 local_769 = (local_768 + local_643);
vec3 local_771 = vec3(0.039999999, 0.039999999, 0.039999999);
vec3 local_772 = vec3(local_641, local_641, local_641);
vec3 local_773 = mix(local_640, local_771, local_772);
// roughnessRange
float local_774 = mix(min_ggx_roughness, max_ggx_roughness, local_622);
vec3 local_775;
{
float local_778 = (1.0 - local_357);
float local_780;
{
float local_783 = 7.2134752;
float local_785 = (local_783 + 1.0892349);
float local_786 = (local_785 * local_778);
float local_787 = (local_786 - local_785);
float local_788 = exp2(local_787);
(local_780 = local_788);
}
vec3 local_790 = vec3(1.0, 1.0, 1.0);
vec3 local_791 = (local_790 - local_773);
vec3 local_792 = (local_791 * local_780);
vec3 local_793 = (local_773 + local_792);
(local_775 = local_793);
}
float local_795;
{
float local_797 = (local_774 * local_774);
float local_798 = (local_797 * local_797);
float local_799 = (local_415 * local_798);
float local_800 = (local_799 - local_415);
float local_801 = (local_800 * local_415);
float local_803 = (local_801 + 1.0);
float local_804 = (local_803 * local_803);
float local_805 = (local_798 / local_804);
float local_807 = min(local_805, 10000.0);
(local_795 = local_807);
}
float local_809;
{
float local_812 = (0.5 * local_774);
float local_813 = (0.5 + local_812);
float local_814 = (0.5 * local_774);
float local_815 = (0.5 + local_814);
float local_816 = (local_813 * local_815);
float local_818 = (1.0 - local_816);
float local_819 = (local_361 * local_818);
float local_820 = (local_819 + local_816);
float local_821 = (1.0 - local_816);
float local_822 = (local_364 * local_821);
float local_823 = (local_822 + local_816);
float local_825 = (local_820 * local_823);
float local_826 = (0.25 / local_825);
(local_809 = local_826);
}
vec3 local_828 = (local_795 * local_775);
vec3 local_829 = (local_828 * local_809);
// specularTerm
vec3 local_830 = (local_829 * local_364);
vec3 local_831;
float local_832;
// specularTerm
(local_831 = local_830);
(local_832 = local_832);
vec3 local_908;
vec3 local_909;
{
float local_912 = (local_622 / 0.14);
float local_917 = local_731.z;
float local_918 = local_731.x;
float local_919 = local_731.y;
float local_921 = atan(local_917, local_918);
float local_922 = (local_921 + 3.141593);
float local_923 = (local_922 * 0.15915491);
float local_924 = acos(local_919);
float local_925 = (local_924 * 0.3183099);
vec2 local_926 = vec2(local_923, local_925);
vec4 local_927 = textureLod(sam_other2_3, local_926, local_912);
vec3 local_928 = local_927.xyz;
float local_929 = local_927.w;
vec3 local_930 = (local_928 * local_929);
vec3 local_931 = (local_930 * max_brightness);
(local_909 = local_931);
}
vec3 local_933;
{
float local_936 = -1.0;
float local_938 = -0.0275;
float local_940 = -0.57200003;
vec4 local_942 = vec4(local_936, local_938, local_940, 0.022);
float local_946 = -0.039999999;
vec4 local_947 = vec4(1.0, 0.0425, 1.04, local_946);
vec4 local_948 = (local_774 * local_942);
vec4 local_949 = (local_948 + local_947);
float local_950 = local_949.x;
float local_951 = local_949.y;
float local_954 = (local_950 * local_950);
float local_956 = -9.2799997;
float local_957 = (local_956 * local_361);
float local_958 = exp2(local_957);
float local_959 = min(local_954, local_958);
float local_960 = (local_959 * local_950);
float local_961 = (local_960 + local_951);
float local_962 = -1.04;
vec2 local_963 = vec2(local_962, 1.04);
vec2 local_964 = (local_963 * local_961);
vec2 local_966 = local_949.zw;
vec2 local_967 = (local_964 + local_966);
float local_968 = local_967.x;
float local_969 = local_967.y;
vec3 local_970 = (local_773 * local_968);
vec3 local_971 = vec3(local_969, local_969, local_969);
vec3 local_972 = (local_971 * envir_fresnel_brightness);
vec3 local_973 = (local_970 + local_972);
(local_933 = local_973);
}
vec3 local_975 = (envir_brightness * local_933);
vec3 local_976 = (local_975 * local_909);
// indirectSpecularTerm
vec3 local_977 = (local_976 * local_759);
vec3 local_978;
// indirectSpecularTerm
(local_978 = local_977);
// indirectSpecularTerm
(local_908 = local_978);
vec3 local_1085;
float local_1086;
vec3 local_1100 = vec3(0.0, 0.0, 0.0);
(local_1085 = local_1100);
// ÑÕÉ«ÌùÍ¼Alpha
(local_1086 = local_636);
float local_1102 = mix(0.60000002, 1.0, local_364);
vec3 local_1103 = (local_908 * local_1102);
vec3 local_1104 = (local_831 + local_1103);
vec3 local_1105 = (local_769 + local_1104);
vec3 local_1106 = (local_1105 * local_691);
vec3 local_1107 = (local_1106 + local_1085);
float local_1108 = (1.0 - local_361);
float local_1109;
{
float local_1112 = (rim_power * 1.442695);
float local_1114 = (local_1112 + 1.0892349);
float local_1115 = (local_1114 * local_1108);
float local_1116 = (local_1115 - local_1114);
float local_1117 = exp2(local_1116);
(local_1109 = local_1117);
}
float local_1119 = smoothstep(u_rim_start, u_rim_end, local_1109);
vec3 local_1120 = rim_color.xyz;
vec3 local_1122 = (local_1119 * local_1120);
vec3 local_1123 = (local_1122 * rim_multi);
vec3 local_1124 = adjust_inner.xyz;
vec3 local_1126 = (local_1107 * local_1124);
vec3 local_1127 = (local_1126 + local_1123);
// alpha
float local_1128 = (local_1108 + inner_alpha);
// color
vec3 local_1129 = (local_1127 + force_pixel_color);
vec3 local_1130;
// color
(local_1130 = local_1129);
float local_1131;
(local_1131 = 1.0);
vec3 local_1151 = vec3(0.30000001, 0.58999997, 0.11);
// dot(saveIndirectSpecularTerm, float3(0.3, 0.59, 0.11));
float local_1152 = dot(local_908, local_1151);
float local_1154 = (local_1152 - 0.02);
// saturate(dot(saveIndirectSpecularTerm, float3(0.3, 0.59, 0.11)) - 0.02)
float local_1155 = clamp(local_1154, 0.0, 1.0);
// lerp(specularLuminance, 1.0, baseCol.a);
float local_1156 = mix(local_1155, 1.0, local_1086);
float local_1157 = (1.0 - local_361);
float local_1159 = (0.5 * local_774);
float local_1160 = (1.0 - local_1159);
float local_1161 = (local_1157 - local_1160);
// saturate((1.0 - NoV) - (1.0 - (0.5 * roughnessRange)));
float local_1162 = clamp(local_1161, 0.0, 1.0);
float local_1163 = (local_1162 / local_774);
float local_1165 = (local_1163 * 6.0);
float local_1166 = (local_1156 * local_1165);
float local_1167 = (local_1156 + local_1166);
// lerp(1.0, baseCol.a, _Cull_Lerp)
float local_1168 = mix(1.0, local_636, cull_lerp);
vec3 local_1171 = vec3(0.18700001, 0.18700001, 0.18700001);
vec3 local_1172 = (local_1130 + local_1171);
vec3 local_1173 = (local_1130 / local_1172);
// half3 colorB = (color / (color + 0.187)) * 1.035;
vec3 local_1175 = (local_1173 * 1.035);
float local_1176 = (local_1128 * local_1131);
float local_1177 = (local_1176 * AlphaMtl);
float local_1178 = (local_1177 * local_1167);
float local_1179 = (local_1178 * local_1168);
vec4 local_1180 = vec4(local_1175.x, local_1175.y, local_1175.z, local_1179);
vec4 local_1181;
(local_1181 = local_1180);
vec4 local_1184;
(local_1184 = local_1181);
vec4 local_1187;
(local_1187 = local_1184);
(gFragColor = local_1187);
}
