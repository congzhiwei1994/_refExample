#version 330
uniform float metal_multi;
uniform float rough_multi;
uniform float envir_brightness;
uniform float envir_fresnel_brightness;
uniform float max_brightness;
uniform float min_ggx_roughness;
uniform float max_ggx_roughness;
uniform float ChangeAmount;
uniform float dir_light_intensity;
uniform vec4 dir_tone;
uniform vec4 env_tone;
uniform float diffuse_intensity;
uniform float u_light_scale;
uniform vec4 env_shadow_factor;
uniform float AO_slider;
uniform vec3 force_pixel_color;
uniform float rim_power;
uniform float rim_multi;
uniform vec4 rim_color;
uniform vec4 adjust_inner;
uniform float inner_alpha;
uniform float u_rim_start;
uniform float u_rim_end;
uniform float emissive_bloom;
uniform float illum_multi;
uniform float bloom_range;
uniform float u_tonemapping_factor;
uniform vec4 u_shadowmap_info;
uniform vec2 shadow_bias_factor;
uniform vec4 ShadowLightAttr[5];
uniform vec4 camera_pos;
uniform mat4 view_mat;
uniform float AlphaMtl;
uniform mat4 envSHR;
uniform mat4 envSHG;
uniform mat4 envSHB;
uniform sampler2D sam_diffuse_0;
uniform sampler2D sam_other1_2;
uniform sampler2D sam_other2_3;
uniform sampler2D sam_other3_5;
uniform sampler2DShadow sam_shadow_4;
in vec4 v_texture0;
in vec4 v_texture2;
in vec3 v_texture4; // tangentWorld
in vec3 v_texture5;	// binormalWorld
in vec3 vertex_normal_world;
in vec4 v_texture9;
out vec4 gFragColor;
void main(){
float sam_other3_5_bias = -1.0;
float sam_diffuse_0_bias = -1.0;
float sam_other1_2_bias = -1.0;
float local_0;
(local_0 = 0.69999999);
vec3 local_3;
float local_4;
vec3 local_5;
vec3 local_6;
vec2 local_7;
float local_8;
// UV
vec2 local_9 = v_texture0.xy;
// 法线贴图
vec4 local_11 = texture(sam_other3_5, local_9, sam_other3_5_bias);
vec2 local_12 = local_11.xy;
vec2 local_15 = (local_12 * 2.0);
vec2 local_17 = vec2(1.0, 1.0);
vec2 local_18 = (local_15 - local_17);
float local_19 = local_18.x;
float local_20 = local_18.y;
vec3 local_21 = (v_texture4 * local_19);
vec3 local_22 = (local_21 * local_0);
vec3 local_23 = (v_texture5 * local_20);
vec3 local_24 = (local_23 * local_0);
vec3 local_25 = (local_22 + local_24);
vec3 local_26 = (local_25 + vertex_normal_world);
// normalWS
vec3 local_27 = normalize(local_26);
// 法线贴图(B通道)
float local_29 = local_11.z;
// normalWS
(local_3 = local_27);
// 法线贴图(B通道)
(local_4 = local_29);
(local_5 = v_texture5);	// binormalWorld
(local_6 = v_texture4);	// tangentWorld
(local_7 = local_18);
// 法线贴图(B通道)
(local_8 = local_29);
vec3 local_36;
vec2 local_37 = (-local_7);
float local_38 = local_37.x;
float local_39 = local_37.y;
vec3 local_40 = (local_6 * local_38);
vec3 local_41 = (local_5 * local_39);
vec3 local_42 = (local_40 + local_41);
vec3 local_43 = (local_42 + vertex_normal_world);
vec3 local_44 = normalize(local_43);
// revNormalWS
(local_36 = local_44);
float local_45;
float local_46;
{
float local_48 = shadow_bias_factor.x;
float local_49 = shadow_bias_factor.y;
float local_52 = v_texture9.w;
float local_53 = (1.0 - local_52);
float local_54 = (local_48 * local_53);
float local_55 = (local_54 + local_49);
float local_57 = clamp(local_55, 0.0, 1.0);
vec2 local_58 = v_texture9.xy;
float local_61 = v_texture9.z;
float local_63 = (local_61 - local_57);
float local_64;
float local_66 = (local_63 * 0.5);
float local_67 = (local_66 + 0.5);
(local_64 = local_67);
float local_68;
vec4 local_76 = vec4(local_58.x, local_58.y, local_64, 1.0);
float local_77 = textureProj(sam_shadow_4, local_76);
(local_68 = local_77);
float local_78 = local_58.x;
float local_79 = local_58.y;
float local_80 = (1.0 - local_78);
float local_81 = (1.0 - local_79);
vec4 local_82 = vec4(local_78, local_80, local_79, local_81);
vec4 local_83 = sign(local_82);
vec4 local_85 = vec4(1.0, 1.0, 1.0, 1.0);
float local_86 = dot(local_83, local_85);
float local_87 = step(3.5, local_86);
float local_88 = (1.0 - local_87);
float local_89 = (local_68 + local_88);
float local_90 = clamp(local_89, 0.0, 1.0);
// shadowmap阴影
(local_46 = local_90);
}
// shadowmap阴影
(local_45 = local_46);
// UV
vec2 local_93 = v_texture0.xy;
vec4 local_95 = texture(sam_diffuse_0, local_93, sam_diffuse_0_bias);
vec4 local_96;
// 颜色贴图
(local_96 = local_95);
// Mix贴图
vec4 local_103 = texture(sam_other1_2, local_93, sam_other1_2_bias);
vec4 local_104;
vec4 local_107 = vec4(0.0, 0.0, 0.0, 0.0);
(local_104 = local_107);
vec4 local_108;
vec4 local_109;
// 颜色贴图
(local_108 = local_96);
// Mix贴图
(local_109 = local_103);
float local_206;
float local_207;
float local_208;
// 金属度
float local_212 = local_109.x;
// 没用到
float local_213 = local_109.y;
// 粗糙度
float local_214 = local_109.z;
float local_216 = (local_212 + metal_multi);
// 金属度 01
float local_217 = clamp(local_216, 0.0, 1.0);
float local_218 = (local_214 + rough_multi);
// 粗糙度 01
float local_219 = clamp(local_218, 0.0, 1.0);
// 没用到
float local_221 = (2.0 * local_213);
// 没用到
float local_223 = (local_221 - 1.0);
// 没用到
float local_225 = clamp(local_223, 0.0, 1.0);
// 金属度 01
(local_206 = local_217);
// 粗糙度 01
(local_207 = local_219);
// 没用到
(local_208 = local_225);
vec3 local_227;
vec3 local_228;
// 光照颜色
vec4 local_254 = ShadowLightAttr[1];
vec3 local_255 = dir_tone.xyz;
vec3 local_257 = (local_255 * dir_light_intensity);
vec3 local_258 = local_254.xyz;
vec3 local_260 = (1.0 * local_258);
vec3 local_261 = vec3(ChangeAmount, ChangeAmount, ChangeAmount);
// 插值修改光照颜色
vec3 local_262 = mix(local_257, local_260, local_261);
// 光照方向
vec4 local_264 = ShadowLightAttr[3];
vec3 local_265 = local_264.xyz;
// 光照方向(与Unity相反)
vec3 local_267 = normalize(local_265);
// 插值后修改光照颜色
(local_227 = local_262);
// 光照方向(与Unity相反)
(local_228 = local_267);
float local_268 = local_228.x;
float local_269 = local_228.y;
float local_270 = local_228.z;
vec3 local_271 = vec3(local_268, local_269, local_270);
// 光照方向(与Unity相反)
vec3 local_272 = normalize(local_271);
vec3 local_273 = camera_pos.xyz;
vec3 local_275 = v_texture2.xyz;
vec3 local_277 = (local_273 - local_275);
// viewDirectionWS
vec3 local_278 = normalize(local_277);
vec3 local_279 = (local_272 * u_light_scale);
// 1 - 金属度 01
float local_280 = (1.0 - local_206);
vec3 local_281 = (local_278 - local_272);
// Half Dir
vec3 local_282 = normalize(local_281);
float local_283 = dot(local_278, local_282);
// VoH 01
float local_285 = clamp(local_283, 0.0, 1.0);
float local_286 = dot(local_3, local_282);
// NoH 01
float local_287 = max(0.0, local_286);
float local_288 = dot(local_278, local_3);
// NoV 01
float local_289 = clamp(local_288, 0.0, 1.0);
// scaleLightDirectionWS
vec3 local_290 = (-local_279);
float local_291 = dot(local_3, local_290);
float local_292;
// NoSL
float local_306 = clamp(local_291, 0.0, 1.0);
// finalNoL
float local_307 = min(local_306, local_45);
// finalNoL
(local_292 = local_307);
float local_308 = -1.0;
// 没用到
float local_309 = clamp(local_292, local_308, 0.0);
float local_310;
// lightDirectionWS
vec3 local_311 = (-local_272);
float local_312 = dot(local_36, local_311);
// RNoL
float local_313 = clamp(local_312, 0.0, 1.0);
float local_316 = mix(1.0, local_45, 0.5);
// finalRNoL
float local_317 = min(local_313, local_316);
// finalRNoL
(local_310 = local_317);
vec3 local_318 = local_108.xyz;
vec3 local_320 = (local_318 * local_318);
// albedo
vec3 local_321 = (local_320 * diffuse_intensity);
// diffuseCol
vec3 local_322 = (local_280 * local_321);
// 未知计算 - 开始
vec3 local_323;
vec3 local_343 = vec3(0.0, 0.0, 0.0);
(local_323 = local_343);
// 未知计算 - 结束
// 没用到 - 开始
vec3 local_344;
float local_346 = mix(1.0, local_4, local_289);
float local_349 = (0.5 - local_4);
float local_350 = clamp(local_349, 0.0, 1.0);
float local_351 = (2.0 * local_350);
float local_352 = (local_351 * AO_slider);
float local_353 = mix(local_346, local_4, local_352);
vec3 local_354 = vec3(local_353, local_353, local_353);
(local_344 = local_354);
// 没用到 - 结束
// 没用到 - 开始
float local_357 = local_108.x;
float local_358 = local_108.y;
float local_359 = local_108.z;
float local_361 = max(local_357, local_358);
float local_362 = max(local_361, local_359);
float local_364 = (local_362 - 0.38999999);
vec3 local_365 = vec3(local_364, local_364, local_364);
vec3 local_367 = vec3(0.1, 0.1, 0.1);
vec3 local_368 = max(local_365, local_367);
vec3 local_369 = (local_318 - local_368);
vec3 local_370 = clamp(local_369, 0.0, 1.0);
// 没用到 - 结束
// AO计算 - 开始
vec3 local_371;
vec3 local_373 = vec3(1.0, 1.0, 1.0);
(local_371 = local_373);
// AO计算 - 结束
// 未知计算 - 开始
vec3 local_374;
vec3 local_375;
vec3 local_409 = vec3(0.0, 0.0, 0.0);
vec3 local_410 = vec3(0.0, 0.0, 0.0);
(local_374 = local_409);
(local_375 = local_410);
// 未知计算 - 结束
// 反射向量计算 - 开始
vec3 local_411;
vec3 local_412 = (-local_278);
vec3 local_413 = reflect(local_412, local_3);
(local_411 = local_413);
// 反射向量计算 - 结束
mat3 local_416 = mat3(view_mat);
vec3 local_417 = (local_416 * local_3);
float local_418 = local_417.x;
float local_419 = local_417.y;
float local_420 = local_417.z;
float local_421 = (-local_420);
vec3 local_422 = vec3(local_418, local_419, local_421);
vec3 local_423;
{
vec4 local_426 = vec4(local_422.x, local_422.y, local_422.z, 1.0);
vec4 local_427 = (envSHR * local_426);
float local_428 = dot(local_426, local_427);
vec4 local_429 = (envSHG * local_426);
float local_430 = dot(local_426, local_429);
vec4 local_431 = (envSHB * local_426);
float local_432 = dot(local_426, local_431);
vec3 local_433 = vec3(local_428, local_430, local_432);
// SH
(local_423 = local_433);
}
vec3 local_435 = env_shadow_factor.xyz;
vec3 local_437 = vec3(1.0, 1.0, 1.0);
vec3 local_438 = vec3(local_310, local_310, local_310);
// lerp(_Env_Shadow_Factor.xyz, 1.0, finalRNoL);
vec3 local_439 = mix(local_435, local_437, local_438);
vec3 local_440 = vec3(local_310, local_310, local_310);
vec3 local_441 = (local_440 + local_374);
// lightColor * finalRNoL
vec3 local_442 = (local_441 * local_227);
vec3 local_443 = (local_439 * local_423);
vec3 local_444 = (local_423 * local_375);
vec3 local_445 = (local_443 + local_444);
vec3 local_446 = (local_445 * envir_brightness);
vec3 local_447 = (local_442 + local_446);
vec3 local_448 = (local_322 * local_447);
vec3 local_449 = (local_448 + local_323);
vec3 local_451 = vec3(0.039999999, 0.039999999, 0.039999999);
vec3 local_452 = vec3(local_280, local_280, local_280);
// 高光颜色 == f0 == SpecularColor / lerp(albedo, 0.04, oneMinusReflectivity)
vec3 local_453 = mix(local_321, local_451, local_452);
// roughnessRange
float local_454 = mix(min_ggx_roughness, max_ggx_roughness, local_207);
float local_455;
(local_455 = local_287);
vec3 local_499;
{
float local_502 = (1.0 - local_285);
float local_504;
{
float local_507 = 7.2134752;
float local_509 = (local_507 + 1.0892349);
float local_510 = (local_509 * local_502);
float local_511 = (local_510 - local_509);
float local_512 = exp2(local_511);
(local_504 = local_512);
}
vec3 local_514 = vec3(1.0, 1.0, 1.0);
vec3 local_515 = (local_514 - local_453);
vec3 local_516 = (local_515 * local_504);
vec3 local_517 = (local_453 + local_516);
// F_Schlick
(local_499 = local_517);
}
float local_519;
{
float local_521 = (local_454 * local_454);
float local_522 = (local_521 * local_521);
float local_523 = (local_455 * local_522);
float local_524 = (local_523 - local_455);
float local_525 = (local_524 * local_455);
float local_527 = (local_525 + 1.0);
float local_528 = (local_527 * local_527);
float local_529 = (local_522 / local_528);
float local_531 = min(local_529, 10000.0);
// D_GGX
(local_519 = local_531);
}
float local_533;
{
float local_536 = (0.5 * local_454);
float local_537 = (0.5 + local_536);
float local_538 = (0.5 * local_454);
float local_539 = (0.5 + local_538);
float local_540 = (local_537 * local_539);
float local_542 = (1.0 - local_540);
float local_543 = (local_289 * local_542);
float local_544 = (local_543 + local_540);
float local_545 = (1.0 - local_540);
float local_546 = (local_292 * local_545);
float local_547 = (local_546 + local_540);
float local_549 = (local_544 * local_547);
float local_550 = (0.25 / local_549);
// Vis_Schlick
(local_533 = local_550);
}
vec3 local_552 = (local_519 * local_499);
vec3 local_553 = (local_552 * local_533);
// D * G * F * finalNoL
vec3 local_554 = (local_553 * local_292);
vec3 local_555;
vec3 local_556;
{
float local_559 = (local_207 / 0.14);
float local_564 = local_411.z;
float local_565 = local_411.x;
float local_566 = local_411.y;
float local_568 = atan(local_564, local_565);
float local_569 = (local_568 + 3.141593);
float local_570 = (local_569 * 0.15915491);
float local_571 = acos(local_566);
float local_572 = (local_571 * 0.3183099);
vec2 local_573 = vec2(local_570, local_572);
vec4 local_574 = textureLod(sam_other2_3, local_573, local_559);
vec3 local_575 = local_574.xyz;
float local_576 = local_574.w;
vec3 local_577 = (local_575 * local_576);
vec3 local_578 = (local_577 * max_brightness);
// GlossyEnvironmentReflection
(local_556 = local_578);
}
vec3 local_580;
{
float local_583 = -1.0;
float local_585 = -0.0275;
float local_587 = -0.57200003;
vec4 local_589 = vec4(local_583, local_585, local_587, 0.022);
float local_593 = -0.039999999;
vec4 local_594 = vec4(1.0, 0.0425, 1.04, local_593);
vec4 local_595 = (local_454 * local_589);
vec4 local_596 = (local_595 + local_594);
float local_597 = local_596.x;
float local_598 = local_596.y;
float local_601 = (local_597 * local_597);
float local_603 = -9.2799997;
float local_604 = (local_603 * local_289);
float local_605 = exp2(local_604);
float local_606 = min(local_601, local_605);
float local_607 = (local_606 * local_597);
float local_608 = (local_607 + local_598);
float local_609 = -1.04;
vec2 local_610 = vec2(local_609, 1.04);
vec2 local_611 = (local_610 * local_608);
vec2 local_613 = local_596.zw;
vec2 local_614 = (local_611 + local_613);
float local_615 = local_614.x;
float local_616 = local_614.y;
vec3 local_617 = (local_453 * local_615);
vec3 local_618 = vec3(local_616, local_616, local_616);
vec3 local_619 = (local_618 * envir_fresnel_brightness);
vec3 local_620 = (local_617 + local_619);
// EnvironmentBRDFApprox
(local_580 = local_620);
}
vec3 local_622 = (envir_brightness * local_580);
vec3 local_623 = (local_622 * local_556);
vec3 local_624 = (local_623 * local_439);
// 计算BRDF环境光
(local_555 = local_624);
// 未知计算 - 开始
vec3 local_631;
float local_632;
vec3 local_641 = vec3(0.0, 0.0, 0.0);
(local_631 = local_641);
(local_632 = 0.0);
// 未知计算 - 结束
float local_643 = mix(0.60000002, 1.0, local_292);
vec3 local_644 = (local_555 * local_643);
vec3 local_645 = (local_554 + local_644);
vec3 local_646 = (local_449 + local_645);
vec3 local_647 = (local_646 * local_371);
vec3 local_648 = env_tone.xyz;
vec3 local_650 = vec3(1.0, 1.0, 1.0);
vec3 local_651 = vec3(ChangeAmount, ChangeAmount, ChangeAmount);
vec3 local_652 = mix(local_648, local_650, local_651);
vec3 local_653 = (local_647 * local_652);
vec3 local_654 = (local_653 + local_631);
// Rim计算 - 开始
float local_655 = (1.0 - local_289);
float local_656;
{
float local_659 = (rim_power * 1.442695);
float local_661 = (local_659 + 1.0892349);
float local_662 = (local_661 * local_655);
float local_663 = (local_662 - local_661);
float local_664 = exp2(local_663);
(local_656 = local_664);
}
float local_666 = smoothstep(u_rim_start, u_rim_end, local_656);
vec3 local_667 = rim_color.xyz;
vec3 local_669 = (local_666 * local_667);
vec3 local_670 = (local_669 * rim_multi);
vec3 local_671 = adjust_inner.xyz;
vec3 local_673 = (local_654 * local_671);
vec3 local_674 = (local_673 + local_670);
float local_675 = (local_655 + inner_alpha);
vec3 local_676 = (local_674 + force_pixel_color);
vec3 local_677;
(local_677 = local_676);
// Rim计算 - 结束
vec3 local_680 = vec3(0.18700001, 0.18700001, 0.18700001);
vec3 local_681 = (local_677 + local_680);
vec3 local_682 = (local_677 / local_681);
vec3 local_684 = (local_682 * 1.035);
float local_685 = (local_675 * 1.0);
float local_686 = (local_685 * AlphaMtl);
vec4 local_687 = vec4(local_684.x, local_684.y, local_684.z, local_686);
float local_688;
{
vec3 local_693 = vec3(0.30000001, 0.58999997, 0.11);
float local_694 = dot(local_645, local_693);
(local_688 = local_694);
}
vec3 local_696 = sqrt(local_677);
vec3 local_698 = vec3(1.5, 1.5, 1.5);
vec3 local_699 = (local_696 / local_698);
float local_700 = (local_206 + bloom_range);
float local_701 = clamp(local_700, 0.0, 1.0);
float local_702 = (local_688 * local_701);
float local_703 = (local_702 * illum_multi);
float local_704 = (local_632 * emissive_bloom);
float local_705 = (local_703 + local_704);
vec4 local_706 = vec4(local_699.x, local_699.y, local_699.z, local_705);
vec4 local_707 = vec4(u_tonemapping_factor, u_tonemapping_factor, u_tonemapping_factor, u_tonemapping_factor);
vec4 local_708 = mix(local_706, local_687, local_707);
vec4 local_709;
(local_709 = local_708);
vec4 local_712;
(local_712 = local_709);
vec4 local_715;
(local_715 = local_712);
(gFragColor = local_715);
}
