#define INV2PI	0.15915494309f
#define PI4	0.33661977236f
#define INVPI2	0.63661977236f
#define HPI		1.57079632679f
#define PI		3.14159265358f
#define PI2		6.28318530717f
#define HSQRT2	0.70710678118f
#define gravity	9.81f

#pragma kernel SpectrumInitalize
#pragma kernel SpectrumUpdate

uint size;
float domainSize;
float windSpeed;
float turbulence;
uint rngState;
float windRotation;

uint WangHash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

uint Rand()
{
	rngState ^= (rngState << 13);
	rngState ^= (rngState >> 17);
	rngState ^= (rngState << 5);
	return rngState;
}

float RandFloat()
{
	return Rand() / 4294967296.0f;
}

float RandGauss()
{
	float u1 = RandFloat();
	float u2 = RandFloat();
	if (u1 < 1e-6f)
		u1 = 1e-6f;
	return sqrt(-2.0f * log(u1)) * cos(PI2 * u2);
}

void DeepDispersion(float k, out float w, out float dwdk)
{
	w = sqrt(abs(gravity * k));
	dwdk = gravity / (2.0f * w);
}

float AlphaBetaSpectrum(float A, float B, float g, float w, float wm)
{
	return (A * g * g / pow(w, 5.0f)) * exp(-B * pow(wm / w, 4.0f));
}

float PiersonMoskowitzSpectrum(float w)
{
	float wm = 0.87f * gravity / windSpeed;
	return AlphaBetaSpectrum(8.1e-3f, 1.291f, gravity, w, wm);
}

float PosCosSquaredDirectionalSpreading(float w, float theta, float kMag, float dTheta)
{
	if (theta > -HPI && theta < HPI)
	{
		float ct = cos(theta);
		return INVPI2 * (ct * ct) * (1 - turbulence) + PI4 * turbulence;
	}
	else
	{
		return PI4 * turbulence;
	}
}

RWTexture2D<float4> resultInit;

[numthreads(8,8,1)]
void SpectrumInitalize(uint2 id : SV_DispatchThreadID)
{
	int2 center = size.xx / 2;
	int2 coord = id - center;


	float s = sin(windRotation);
	float c = cos(windRotation);
	float2x2 rotationMatrix = float2x2(c, -s, s, c);

	coord = mul(coord, rotationMatrix);


	if (coord.x == 0 && coord.y == 0)
	{
		resultInit[id] = float4(0, 0, 0, 0);
		return;
	}

	// Find wave vector and number
	
	float2 k = PI2 * coord / domainSize;
	float kMag = length(k);

	// Init seed
	rngState = WangHash(id.y * size + id.x);

	// Dispersion
	float w; float dwdk;
	DeepDispersion(kMag, w, dwdk);

	// Spectrum
	float spectrum = PiersonMoskowitzSpectrum(w);
	float deltaSPos = spectrum;
	float deltaSNeg = spectrum;

	// Directional spreading
	float dK = PI2 / domainSize;
	float thetaPos = atan2(-k.y, k.x);
	float thetaNeg = atan2(k.y, -k.x);
	float dTheta = abs(atan2(dK, kMag));
	deltaSPos *= PosCosSquaredDirectionalSpreading(w, thetaPos, kMag, dTheta);
	deltaSNeg *= PosCosSquaredDirectionalSpreading(w, thetaNeg, kMag, dTheta);
	deltaSPos *= (dK * dK) * dwdk / kMag;
	deltaSNeg *= (dK * dK) * dwdk / kMag;

	// Amplitude
	float ampPos = RandGauss() * sqrt(abs(deltaSPos) * 2.0f);
	float ampNeg = RandGauss() * sqrt(abs(deltaSNeg) * 2.0f);

	
	// Output
	float phasePos = RandFloat() * PI2;
	float phaseNeg = RandFloat() * PI2;


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//outputH0[id] = float4(ampPos * cos(phasePos), 0, 0, 1);
	//return;
	//outputH0[id] = float4(ampPos, 0, 0, 1);
	resultInit[id] = float4(ampPos * float2(cos(phasePos), -sin(phasePos)), ampNeg * float2(cos(phaseNeg), -sin(phaseNeg)))*1.5;
}

float time;

Texture2D<float4> init0;
RWTexture2D<float2> resultHeight;
RWTexture2D<float2> resultDisplaceX;
RWTexture2D<float2> resultDisplaceZ;

float2 cmul(float2 lhs, float2 rhs)
{
	return float2(
		lhs.x * rhs.x - lhs.y * rhs.y,
		lhs.x * rhs.y + lhs.y * rhs.x
	);
}

[numthreads(8,8,1)]
void SpectrumUpdate(uint2 id : SV_DispatchThreadID)
{
	int2 center = size.xx / 2;
	int2 coord = id - center;
	
	// Find wave vector and number
	float2 k = PI2 * coord / domainSize;
	float kMag = length(k);

	// Dispersion
	float w; float dwdk;
	DeepDispersion(kMag, w, dwdk);

	// Advance time
	float sw; float cw;
	sincos(w * time, sw, cw);

	float2 fwd = float2(cw, -sw);
	float2 bkwd = float2(cw, sw);

	float4 h0 = init0[id];
	float2 h = cmul(h0.xy, fwd) + cmul(h0.zw, bkwd);

	resultHeight[id] = h;
	resultDisplaceX[id] = float2(-h.y * k.x, h.x * k.x) / (kMag + 0.00001f);
	resultDisplaceZ[id] = float2(-h.y * k.y, h.x * k.y) / (kMag + 0.00001f);
}
